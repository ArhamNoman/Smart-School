{"version":3,"sources":["auth.js","Components/LoginNavbar.js","Components/Login.js","Components/MainMenu.js","ProtectedRoute.js","Components/NotFound.js","App.js","serviceWorker.js","index.js","Components/logo.png"],"names":["auth","Auth","Object","classCallCheck","this","authenticated","cb","LoginNavBar","react_default","a","createElement","Navbar","bg","Brand","href","Component","Login","state","username","password","showModal","connectionTimeout","handleChange","event","_event$target","target","name","value","_this","setState","defineProperty","sendToServer","message","resp","preventDefault","console","log","axios","post","then","res","data","success","handleSubmit","isLogin","st","login","props","history","push","alert","_this2","Modal","className","size","centered","show","Body","Spinner","animation","variant","LoginNavbar","Card","style","width","Header","Form","onSubmit","e","Group","as","Col","Control","required","type","placeholder","onChange","Button","MainMenu","onClick","logout","ProtectedRoute","_ref","component","rest","objectWithoutProperties","react_router","assign","render","isAuthenticated","to","pathname","from","location","NotFound","App","exact","path","ProtectedRoute_ProtectedRoute","Boolean","window","hostname","match","ReactDOM","react_router_dom","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.e7235902.chunk.js","sourcesContent":["class Auth {\n    constructor() {\n      this.authenticated = false;\n    }\n  \n    login(cb) {\n      this.authenticated = true;\n      cb();\n    }\n  \n    logout(cb) {\n      this.authenticated = false;\n      cb();\n    }\n  \n    isAuthenticated() {\n      return this.authenticated;\n    }\n  }\n  \n  export default new Auth();\n  ","import React, { Component } from 'react';\nimport { Button,Navbar,Form,Alert,Card,\nContainer,Row,Col\n} from 'react-bootstrap';\nimport logo from \"./logo.png\";\n\n\nclass LoginNavBar extends Component {\n\trender(){\n\t\treturn(\n\t\t\t<Navbar bg=\"light\">\n  \t\t\t  <Navbar.Brand href=\"#home\">\n\t\t\t      {/* <img\n\t\t\t        // src= {logo}\n\t\t\t        width=\"250\"\n\t\t\t        height=\"80\"\n\t\t\t        className=\"d-inline-block align-top\"\n\t\t\t        alt=\"logo\"\n\t\t\t      /> */}\n\t\t\t    </Navbar.Brand>\n\t\t\t    {'Smart School Management System'}\n\n\t\t\t  </Navbar>\n\t\t)\n\t}\n}\n\nexport default LoginNavBar;","import React, { Component } from 'react';\nimport {Route,Switch} from 'react-router'\nimport Auth from '../auth'\nimport axios from \"axios\"\nimport {Form,Button,Card,Col,Row,Modal,Spinner} from 'react-bootstrap'\nimport '../App.css'\nimport LoginNavbar from './LoginNavbar';\n\n\nclass Login extends Component {\n\n  state = {\n    username: '',\n    password: '',\n    showModal: false,\n    connectionTimeout: false\n  }\n\n\n  handleChange = (event) => {\n    const {name, value} = event.target\n    this.setState({[name]: value});\n  }\n\n  sendToServer = (message,event,cb) => {\n    event.preventDefault()\n    console.log(\"sent\", message.username )\n    this.setState({showModal: true})\n    let resp;\n    axios.post(\"http://10.130.13.216:8080/admin-login\", {\n      username: message.username,\n      password: message.password\n    }).then((res) => {\n\n        resp = res.data.success\n        console.log(resp)\n        this.setState({showModal:false})\n        cb(resp,this.state)\n    })\n    \n  }\n\n  handleSubmit = (isLogin,st) => {   \n\n    console.log(\"handlesubmit\",isLogin)\n    if(isLogin===true)\n    {\n      Auth.login(()=>{\n        this.props.history.push(\"/app\")\n      })\n    }\n    else{\n      // if(st.connectionTimeout===true)\n      // {\n      //   alert(\"Connection Timeout\")\n      //   this.setState({\n      //   username: '',\n      //   password: ''\n      // })\n      // }\n      // else{\n          alert(\"Invalid Credentials\")\n          this.setState({\n          username: '',\n          password: ''\n        })\n      // }\n      \n    }\n    \n  }\n\n\n  render() {\n    return ( \n    <div>\n\n      <Modal\n        className=\"App\"\n        size=\"sm\"\n        centered\n        show={this.state.showModal}\n      >\n        <Modal.Body>\n            <Spinner animation=\"grow\" variant=\"primary\" />\n            <Spinner animation=\"grow\" variant=\"warning\" />\n            <Spinner animation=\"grow\" variant=\"danger\" />\n        </Modal.Body>\n      </Modal>\n\n\n      <LoginNavbar />\n        <div className=\"center\">\n\n          <Card style={{ width: '20rem'}} >\n          <div className=\"App\">\n            <Card.Header>User Login</Card.Header>\n            <Card.Body>\n            \n            <Form\n            onSubmit={(e)=>this.sendToServer(this.state,e,(resp) => this.handleSubmit(resp))}\n            >\n             <Form.Group as={Col}>\n               {/* <Form.Label>Username:</Form.Label> */}\n               <Form.Control\n                required\n                type=\"text\"\n                name=\"username\"\n                placeholder=\"Enter Username\"\n                value={this.state.username}\n                onChange={this.handleChange}\n               />\n             </Form.Group >\n\n             <Form.Group as={Col}>\n               {/* <Form.Label>Password:</Form.Label> */}\n               <Form.Control\n                required\n                type=\"password\"\n                placeholder=\"Enter Password\"\n                name=\"password\" \n                value={this.state.password} \n                onChange={this.handleChange}\n               />\n             </Form.Group>\n\n              <Button type=\"submit\">Login</Button>\n          </Form>\n          \n            </Card.Body>\n          </div>\n          </Card> \n           \n        </div>\n    </div>\n    );\n  }\n}\n\nexport default Login;\n","import React, { Component } from 'react';\nimport {Route,Switch} from 'react-router'\nimport auth from '../auth';\n\n\nclass MainMenu extends Component {\n  render() {\n    return (\n      <div>\n        <h1>MainMenu</h1>\n        <button onClick={() => {\n          auth.logout(()=> {\n            this.props.history.push(\"/\")\n          })\n        }} >logout</button>\n      </div>\n    );\n  }\n}\n\nexport default MainMenu;\n","import React, { Component } from 'react';\nimport {Redirect,Route,Switch} from 'react-router'\nimport Auth from './auth';\n\n\nexport const ProtectedRoute = ({component: Component, ...rest}) => {\n    return (\n        <Route \n          {...rest}\n          render={props => {\n              if(Auth.isAuthenticated()){\n                  return <Component {...props} />\n              } else {\n                return (\n                    <Redirect\n                      to={{\n                        pathname: \"/\",\n                        state: {\n                          from: props.location\n                        }\n                      }}\n                    />\n                ) \n              }\n          }}\n        />\n    )\n}\n","import React, { Component } from 'react';\n\n\nclass NotFound extends Component {\n  render() {\n    return (\n      <div>\n        <h1>ERROR 404: NOT FOUND</h1>\n      </div>\n    );\n  }\n}\n\nexport default NotFound;\n","import React, { Component } from 'react';\nimport {Redirect,Switch, Route} from 'react-router-dom'\nimport Login from './Components/Login'\nimport MainMenu from './Components/MainMenu'\nimport {ProtectedRoute} from './ProtectedRoute'\nimport NotFound from './Components/NotFound'\nimport './App.css';\n\n\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n        <Switch>\n          <Route exact path=\"/\" component={Login}/>\n          <ProtectedRoute path=\"/app\" component={MainMenu}/>\n          <Route path = \"*\" component={NotFound} />\n        </Switch>\n      </div>\n    );\n  }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport {BrowserRouter} from 'react-router-dom'\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<BrowserRouter> <App /></BrowserRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.83918590.png\";"],"sourceRoot":""}